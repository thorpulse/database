#!/usr/bin/env php
<?php
require dirname(__DIR__) . '/vendor/autoload.php';

use Icecave\Recoil\Recoil;

function insertTestData($connection, $connectionName, $count)
{
    for ($i = 1; $i <= $count; ++$i) {
        $value = $i . '-' . $connectionName;

        yield $connection->exec(
            sprintf(
                'INSERT INTO interleaved_inserts VALUES (null, %s)',
                (yield $connection->quote($value))
            )
        );

        $id = (yield $connection->lastInsertId());

        echo 'Connection "' . $connectionName . '" inserted "' . $value . '" with ID ' . $id . PHP_EOL;
    }
}

function connect($dsn)
{
    $factory = new Icecave\Engage\ConnectionFactory;
    $connection = (yield $factory->create());
    yield $connection->connect($dsn);
    yield $connection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    yield Recoil::return_($connection);
}

function main()
{
    $db  = sys_get_temp_dir() . '/engage-examples.sq3';
    $dsn = 'sqlite:' . $db;

    $connectionA = (yield connect($dsn));
    $connectionB = (yield connect($dsn));
    $connectionC = (yield connect($dsn));
    $connectionD = (yield connect($dsn));

    yield $connectionA->exec('DROP TABLE IF EXISTS interleaved_inserts');
    yield $connectionA->exec(
        'CREATE TABLE interleaved_inserts (
            id INTEGER PRIMARY KEY,
            name STRING NOT NULL
        )'
    );

    // Perform some interleaved, asynchronous inserts ...
    yield Recoil::execute(insertTestData($connectionA, 'A', 5));
    yield Recoil::execute(insertTestData($connectionB, 'B', 5));
    yield Recoil::execute(insertTestData($connectionC, 'C', 5));
    yield Recoil::execute(insertTestData($connectionD, 'D', 5));
}

$kernel = new Icecave\Recoil\Kernel\Kernel;
$kernel->execute(main());
$kernel->eventLoop()->run();
